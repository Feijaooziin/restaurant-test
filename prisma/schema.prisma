generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     Role
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Restaurant {
  id              Int        @id @default(autoincrement())
  name            String
  slug            String        @unique
  description     String
  avatarImageUrl  String
  coverImageUrl   String
  menuCategories  MenuCategory[]
  products        Product[]
  orders          Order[]
  mesa            Mesa[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Mesa {
  id            Int   @id @default(autoincrement())
  slug          String        @unique
  name          String
  numero        Int
  ocupada       Boolean       @default(false)
  restaurant    Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId  Int
  order  Order[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model MenuCategory {
  id            Int   @id @default(autoincrement())
  name         String
  restaurant   Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  products     Product[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Product {
  id            Int   @id @default(autoincrement())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId   Int
  menuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  orderProducts  OrderProduct[]
  menuCategoryId Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Order {
  id            Int   @id @default(autoincrement())
  total             Float
  status            OrderStatus
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId      Int
  mesa              Mesa              @relation(fields: [mesaId], references: [id], onDelete: Cascade)
  mesaId            Int
  orderProducts     OrderProduct[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model OrderProduct {
  id            Int   @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
}

enum Role {
  ADMIN
  GARCOM
  COZINHA
}